// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChessPlayerInfo.proto

package emu.grasscutter.net.proto;

public final class ChessPlayerInfoOuterClass {
  private ChessPlayerInfoOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ChessPlayerInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:ChessPlayerInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 uid = 5;</code>
     * @return The uid.
     */
    int getUid();

    /**
     * <code>uint32 free_refresh_limit = 10;</code>
     * @return The freeRefreshLimit.
     */
    int getFreeRefreshLimit();

    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> 
        getCandidateCardInfoListList();
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo getCandidateCardInfoList(int index);
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    int getCandidateCardInfoListCount();
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    java.util.List<? extends emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder> 
        getCandidateCardInfoListOrBuilderList();
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder getCandidateCardInfoListOrBuilder(
        int index);

    /**
     * <code>uint32 building_points = 12;</code>
     * @return The buildingPoints.
     */
    int getBuildingPoints();

    /**
     * <code>uint32 candidate_index = 6;</code>
     * @return The candidateIndex.
     */
    int getCandidateIndex();

    /**
     * <code>uint32 free_refresh_count = 13;</code>
     * @return The freeRefreshCount.
     */
    int getFreeRefreshCount();

    /**
     * <code>uint32 refresh_cost = 7;</code>
     * @return The refreshCost.
     */
    int getRefreshCost();
  }
  /**
   * Protobuf type {@code ChessPlayerInfo}
   */
  public static final class ChessPlayerInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:ChessPlayerInfo)
      ChessPlayerInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ChessPlayerInfo.newBuilder() to construct.
    private ChessPlayerInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ChessPlayerInfo() {
      candidateCardInfoList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ChessPlayerInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ChessPlayerInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 26: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                candidateCardInfoList_ = new java.util.ArrayList<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              candidateCardInfoList_.add(
                  input.readMessage(emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.parser(), extensionRegistry));
              break;
            }
            case 40: {

              uid_ = input.readUInt32();
              break;
            }
            case 48: {

              candidateIndex_ = input.readUInt32();
              break;
            }
            case 56: {

              refreshCost_ = input.readUInt32();
              break;
            }
            case 80: {

              freeRefreshLimit_ = input.readUInt32();
              break;
            }
            case 96: {

              buildingPoints_ = input.readUInt32();
              break;
            }
            case 104: {

              freeRefreshCount_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          candidateCardInfoList_ = java.util.Collections.unmodifiableList(candidateCardInfoList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.internal_static_ChessPlayerInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.internal_static_ChessPlayerInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.class, emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.Builder.class);
    }

    public static final int UID_FIELD_NUMBER = 5;
    private int uid_;
    /**
     * <code>uint32 uid = 5;</code>
     * @return The uid.
     */
    @java.lang.Override
    public int getUid() {
      return uid_;
    }

    public static final int FREE_REFRESH_LIMIT_FIELD_NUMBER = 10;
    private int freeRefreshLimit_;
    /**
     * <code>uint32 free_refresh_limit = 10;</code>
     * @return The freeRefreshLimit.
     */
    @java.lang.Override
    public int getFreeRefreshLimit() {
      return freeRefreshLimit_;
    }

    public static final int CANDIDATE_CARD_INFO_LIST_FIELD_NUMBER = 3;
    private java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> candidateCardInfoList_;
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    @java.lang.Override
    public java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> getCandidateCardInfoListList() {
      return candidateCardInfoList_;
    }
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder> 
        getCandidateCardInfoListOrBuilderList() {
      return candidateCardInfoList_;
    }
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    @java.lang.Override
    public int getCandidateCardInfoListCount() {
      return candidateCardInfoList_.size();
    }
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    @java.lang.Override
    public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo getCandidateCardInfoList(int index) {
      return candidateCardInfoList_.get(index);
    }
    /**
     * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
     */
    @java.lang.Override
    public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder getCandidateCardInfoListOrBuilder(
        int index) {
      return candidateCardInfoList_.get(index);
    }

    public static final int BUILDING_POINTS_FIELD_NUMBER = 12;
    private int buildingPoints_;
    /**
     * <code>uint32 building_points = 12;</code>
     * @return The buildingPoints.
     */
    @java.lang.Override
    public int getBuildingPoints() {
      return buildingPoints_;
    }

    public static final int CANDIDATE_INDEX_FIELD_NUMBER = 6;
    private int candidateIndex_;
    /**
     * <code>uint32 candidate_index = 6;</code>
     * @return The candidateIndex.
     */
    @java.lang.Override
    public int getCandidateIndex() {
      return candidateIndex_;
    }

    public static final int FREE_REFRESH_COUNT_FIELD_NUMBER = 13;
    private int freeRefreshCount_;
    /**
     * <code>uint32 free_refresh_count = 13;</code>
     * @return The freeRefreshCount.
     */
    @java.lang.Override
    public int getFreeRefreshCount() {
      return freeRefreshCount_;
    }

    public static final int REFRESH_COST_FIELD_NUMBER = 7;
    private int refreshCost_;
    /**
     * <code>uint32 refresh_cost = 7;</code>
     * @return The refreshCost.
     */
    @java.lang.Override
    public int getRefreshCost() {
      return refreshCost_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < candidateCardInfoList_.size(); i++) {
        output.writeMessage(3, candidateCardInfoList_.get(i));
      }
      if (uid_ != 0) {
        output.writeUInt32(5, uid_);
      }
      if (candidateIndex_ != 0) {
        output.writeUInt32(6, candidateIndex_);
      }
      if (refreshCost_ != 0) {
        output.writeUInt32(7, refreshCost_);
      }
      if (freeRefreshLimit_ != 0) {
        output.writeUInt32(10, freeRefreshLimit_);
      }
      if (buildingPoints_ != 0) {
        output.writeUInt32(12, buildingPoints_);
      }
      if (freeRefreshCount_ != 0) {
        output.writeUInt32(13, freeRefreshCount_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < candidateCardInfoList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, candidateCardInfoList_.get(i));
      }
      if (uid_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, uid_);
      }
      if (candidateIndex_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, candidateIndex_);
      }
      if (refreshCost_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, refreshCost_);
      }
      if (freeRefreshLimit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, freeRefreshLimit_);
      }
      if (buildingPoints_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, buildingPoints_);
      }
      if (freeRefreshCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, freeRefreshCount_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo)) {
        return super.equals(obj);
      }
      emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo other = (emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo) obj;

      if (getUid()
          != other.getUid()) return false;
      if (getFreeRefreshLimit()
          != other.getFreeRefreshLimit()) return false;
      if (!getCandidateCardInfoListList()
          .equals(other.getCandidateCardInfoListList())) return false;
      if (getBuildingPoints()
          != other.getBuildingPoints()) return false;
      if (getCandidateIndex()
          != other.getCandidateIndex()) return false;
      if (getFreeRefreshCount()
          != other.getFreeRefreshCount()) return false;
      if (getRefreshCost()
          != other.getRefreshCost()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + getUid();
      hash = (37 * hash) + FREE_REFRESH_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getFreeRefreshLimit();
      if (getCandidateCardInfoListCount() > 0) {
        hash = (37 * hash) + CANDIDATE_CARD_INFO_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getCandidateCardInfoListList().hashCode();
      }
      hash = (37 * hash) + BUILDING_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getBuildingPoints();
      hash = (37 * hash) + CANDIDATE_INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getCandidateIndex();
      hash = (37 * hash) + FREE_REFRESH_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getFreeRefreshCount();
      hash = (37 * hash) + REFRESH_COST_FIELD_NUMBER;
      hash = (53 * hash) + getRefreshCost();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ChessPlayerInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:ChessPlayerInfo)
        emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.internal_static_ChessPlayerInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.internal_static_ChessPlayerInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.class, emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.Builder.class);
      }

      // Construct using emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCandidateCardInfoListFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        uid_ = 0;

        freeRefreshLimit_ = 0;

        if (candidateCardInfoListBuilder_ == null) {
          candidateCardInfoList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          candidateCardInfoListBuilder_.clear();
        }
        buildingPoints_ = 0;

        candidateIndex_ = 0;

        freeRefreshCount_ = 0;

        refreshCost_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.internal_static_ChessPlayerInfo_descriptor;
      }

      @java.lang.Override
      public emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo getDefaultInstanceForType() {
        return emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.getDefaultInstance();
      }

      @java.lang.Override
      public emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo build() {
        emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo buildPartial() {
        emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo result = new emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo(this);
        int from_bitField0_ = bitField0_;
        result.uid_ = uid_;
        result.freeRefreshLimit_ = freeRefreshLimit_;
        if (candidateCardInfoListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            candidateCardInfoList_ = java.util.Collections.unmodifiableList(candidateCardInfoList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.candidateCardInfoList_ = candidateCardInfoList_;
        } else {
          result.candidateCardInfoList_ = candidateCardInfoListBuilder_.build();
        }
        result.buildingPoints_ = buildingPoints_;
        result.candidateIndex_ = candidateIndex_;
        result.freeRefreshCount_ = freeRefreshCount_;
        result.refreshCost_ = refreshCost_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo) {
          return mergeFrom((emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo other) {
        if (other == emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo.getDefaultInstance()) return this;
        if (other.getUid() != 0) {
          setUid(other.getUid());
        }
        if (other.getFreeRefreshLimit() != 0) {
          setFreeRefreshLimit(other.getFreeRefreshLimit());
        }
        if (candidateCardInfoListBuilder_ == null) {
          if (!other.candidateCardInfoList_.isEmpty()) {
            if (candidateCardInfoList_.isEmpty()) {
              candidateCardInfoList_ = other.candidateCardInfoList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCandidateCardInfoListIsMutable();
              candidateCardInfoList_.addAll(other.candidateCardInfoList_);
            }
            onChanged();
          }
        } else {
          if (!other.candidateCardInfoList_.isEmpty()) {
            if (candidateCardInfoListBuilder_.isEmpty()) {
              candidateCardInfoListBuilder_.dispose();
              candidateCardInfoListBuilder_ = null;
              candidateCardInfoList_ = other.candidateCardInfoList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              candidateCardInfoListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCandidateCardInfoListFieldBuilder() : null;
            } else {
              candidateCardInfoListBuilder_.addAllMessages(other.candidateCardInfoList_);
            }
          }
        }
        if (other.getBuildingPoints() != 0) {
          setBuildingPoints(other.getBuildingPoints());
        }
        if (other.getCandidateIndex() != 0) {
          setCandidateIndex(other.getCandidateIndex());
        }
        if (other.getFreeRefreshCount() != 0) {
          setFreeRefreshCount(other.getFreeRefreshCount());
        }
        if (other.getRefreshCost() != 0) {
          setRefreshCost(other.getRefreshCost());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int uid_ ;
      /**
       * <code>uint32 uid = 5;</code>
       * @return The uid.
       */
      @java.lang.Override
      public int getUid() {
        return uid_;
      }
      /**
       * <code>uint32 uid = 5;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(int value) {
        
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 uid = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        
        uid_ = 0;
        onChanged();
        return this;
      }

      private int freeRefreshLimit_ ;
      /**
       * <code>uint32 free_refresh_limit = 10;</code>
       * @return The freeRefreshLimit.
       */
      @java.lang.Override
      public int getFreeRefreshLimit() {
        return freeRefreshLimit_;
      }
      /**
       * <code>uint32 free_refresh_limit = 10;</code>
       * @param value The freeRefreshLimit to set.
       * @return This builder for chaining.
       */
      public Builder setFreeRefreshLimit(int value) {
        
        freeRefreshLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 free_refresh_limit = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearFreeRefreshLimit() {
        
        freeRefreshLimit_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> candidateCardInfoList_ =
        java.util.Collections.emptyList();
      private void ensureCandidateCardInfoListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          candidateCardInfoList_ = new java.util.ArrayList<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo>(candidateCardInfoList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder> candidateCardInfoListBuilder_;

      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> getCandidateCardInfoListList() {
        if (candidateCardInfoListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(candidateCardInfoList_);
        } else {
          return candidateCardInfoListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public int getCandidateCardInfoListCount() {
        if (candidateCardInfoListBuilder_ == null) {
          return candidateCardInfoList_.size();
        } else {
          return candidateCardInfoListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo getCandidateCardInfoList(int index) {
        if (candidateCardInfoListBuilder_ == null) {
          return candidateCardInfoList_.get(index);
        } else {
          return candidateCardInfoListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder setCandidateCardInfoList(
          int index, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo value) {
        if (candidateCardInfoListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.set(index, value);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder setCandidateCardInfoList(
          int index, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder builderForValue) {
        if (candidateCardInfoListBuilder_ == null) {
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.set(index, builderForValue.build());
          onChanged();
        } else {
          candidateCardInfoListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder addCandidateCardInfoList(emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo value) {
        if (candidateCardInfoListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.add(value);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder addCandidateCardInfoList(
          int index, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo value) {
        if (candidateCardInfoListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.add(index, value);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder addCandidateCardInfoList(
          emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder builderForValue) {
        if (candidateCardInfoListBuilder_ == null) {
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.add(builderForValue.build());
          onChanged();
        } else {
          candidateCardInfoListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder addCandidateCardInfoList(
          int index, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder builderForValue) {
        if (candidateCardInfoListBuilder_ == null) {
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.add(index, builderForValue.build());
          onChanged();
        } else {
          candidateCardInfoListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder addAllCandidateCardInfoList(
          java.lang.Iterable<? extends emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo> values) {
        if (candidateCardInfoListBuilder_ == null) {
          ensureCandidateCardInfoListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, candidateCardInfoList_);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder clearCandidateCardInfoList() {
        if (candidateCardInfoListBuilder_ == null) {
          candidateCardInfoList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public Builder removeCandidateCardInfoList(int index) {
        if (candidateCardInfoListBuilder_ == null) {
          ensureCandidateCardInfoListIsMutable();
          candidateCardInfoList_.remove(index);
          onChanged();
        } else {
          candidateCardInfoListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder getCandidateCardInfoListBuilder(
          int index) {
        return getCandidateCardInfoListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder getCandidateCardInfoListOrBuilder(
          int index) {
        if (candidateCardInfoListBuilder_ == null) {
          return candidateCardInfoList_.get(index);  } else {
          return candidateCardInfoListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public java.util.List<? extends emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder> 
           getCandidateCardInfoListOrBuilderList() {
        if (candidateCardInfoListBuilder_ != null) {
          return candidateCardInfoListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(candidateCardInfoList_);
        }
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder addCandidateCardInfoListBuilder() {
        return getCandidateCardInfoListFieldBuilder().addBuilder(
            emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder addCandidateCardInfoListBuilder(
          int index) {
        return getCandidateCardInfoListFieldBuilder().addBuilder(
            index, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .ChessNormalCardInfo candidate_card_info_list = 3;</code>
       */
      public java.util.List<emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder> 
           getCandidateCardInfoListBuilderList() {
        return getCandidateCardInfoListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder> 
          getCandidateCardInfoListFieldBuilder() {
        if (candidateCardInfoListBuilder_ == null) {
          candidateCardInfoListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfo.Builder, emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.ChessNormalCardInfoOrBuilder>(
                  candidateCardInfoList_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          candidateCardInfoList_ = null;
        }
        return candidateCardInfoListBuilder_;
      }

      private int buildingPoints_ ;
      /**
       * <code>uint32 building_points = 12;</code>
       * @return The buildingPoints.
       */
      @java.lang.Override
      public int getBuildingPoints() {
        return buildingPoints_;
      }
      /**
       * <code>uint32 building_points = 12;</code>
       * @param value The buildingPoints to set.
       * @return This builder for chaining.
       */
      public Builder setBuildingPoints(int value) {
        
        buildingPoints_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 building_points = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearBuildingPoints() {
        
        buildingPoints_ = 0;
        onChanged();
        return this;
      }

      private int candidateIndex_ ;
      /**
       * <code>uint32 candidate_index = 6;</code>
       * @return The candidateIndex.
       */
      @java.lang.Override
      public int getCandidateIndex() {
        return candidateIndex_;
      }
      /**
       * <code>uint32 candidate_index = 6;</code>
       * @param value The candidateIndex to set.
       * @return This builder for chaining.
       */
      public Builder setCandidateIndex(int value) {
        
        candidateIndex_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 candidate_index = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearCandidateIndex() {
        
        candidateIndex_ = 0;
        onChanged();
        return this;
      }

      private int freeRefreshCount_ ;
      /**
       * <code>uint32 free_refresh_count = 13;</code>
       * @return The freeRefreshCount.
       */
      @java.lang.Override
      public int getFreeRefreshCount() {
        return freeRefreshCount_;
      }
      /**
       * <code>uint32 free_refresh_count = 13;</code>
       * @param value The freeRefreshCount to set.
       * @return This builder for chaining.
       */
      public Builder setFreeRefreshCount(int value) {
        
        freeRefreshCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 free_refresh_count = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearFreeRefreshCount() {
        
        freeRefreshCount_ = 0;
        onChanged();
        return this;
      }

      private int refreshCost_ ;
      /**
       * <code>uint32 refresh_cost = 7;</code>
       * @return The refreshCost.
       */
      @java.lang.Override
      public int getRefreshCost() {
        return refreshCost_;
      }
      /**
       * <code>uint32 refresh_cost = 7;</code>
       * @param value The refreshCost to set.
       * @return This builder for chaining.
       */
      public Builder setRefreshCost(int value) {
        
        refreshCost_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 refresh_cost = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRefreshCost() {
        
        refreshCost_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:ChessPlayerInfo)
    }

    // @@protoc_insertion_point(class_scope:ChessPlayerInfo)
    private static final emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo();
    }

    public static emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChessPlayerInfo>
        PARSER = new com.google.protobuf.AbstractParser<ChessPlayerInfo>() {
      @java.lang.Override
      public ChessPlayerInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ChessPlayerInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ChessPlayerInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChessPlayerInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public emu.grasscutter.net.proto.ChessPlayerInfoOuterClass.ChessPlayerInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_ChessPlayerInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_ChessPlayerInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025ChessPlayerInfo.proto\032\031ChessNormalCard" +
      "Info.proto\"\326\001\n\017ChessPlayerInfo\022\013\n\003uid\030\005 " +
      "\001(\r\022\032\n\022free_refresh_limit\030\n \001(\r\0226\n\030candi" +
      "date_card_info_list\030\003 \003(\0132\024.ChessNormalC" +
      "ardInfo\022\027\n\017building_points\030\014 \001(\r\022\027\n\017cand" +
      "idate_index\030\006 \001(\r\022\032\n\022free_refresh_count\030" +
      "\r \001(\r\022\024\n\014refresh_cost\030\007 \001(\rB\033\n\031emu.grass" +
      "cutter.net.protob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.getDescriptor(),
        });
    internal_static_ChessPlayerInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_ChessPlayerInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_ChessPlayerInfo_descriptor,
        new java.lang.String[] { "Uid", "FreeRefreshLimit", "CandidateCardInfoList", "BuildingPoints", "CandidateIndex", "FreeRefreshCount", "RefreshCost", });
    emu.grasscutter.net.proto.ChessNormalCardInfoOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
